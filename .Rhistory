write.table(final.df, file = file_name, sep = ",", row.names=FALSE, na="0", quote=TRUE, qmethod='double')
library("tm")
stemDocument
stemDocument()
aaa <- stemDocument
View(aaa)
UseMethod("stemDocument", x)
packages.install("gdata")
#You can install it with install.packages("gdata")
require("gdata")
#If you don't have gdata library,
#You can install it with install.packages("gdata")
#File 1
mydata1 = read.xls("./Documents/combine01.xlsx")
#File 2
mydata2 = read.xls("./Documents/combine02.xlsx")
mydata3 = merge(mydata1, mydata2)
write.csv("./Documents/output.csv")
library("gdata")
require("gdata")
install.packages("gdata")
library("gdata")
mydata1 = read.xls("./Documents/combine01.xlsx")
mydata1
mydata2 = read.xls("./Documents/combine02.xlsx")
mydata2
mydata3 = merge(mydata1, mydata2)
mydata3
mydata3 <- merge(mydata1, mydata2)
mydata3
mydata3 <- rbind(mydata1, mydata2)
mydata3
write.csv(mydata3, "./Documents/output.csv")
library("gdata")
mydata1 <- read.xls("./Documents/combine01.xlsx")
mydata1
mydata <- read.xls("./Documents/divvy.csv")
mydata <- read.csv("./Documents/divvy.csv")
head(mydata)
mydata2$from <- mydata$from_station_id
count(mydata)
masterdf[ ! duplicated( masterdf[ c("Quarter" , "CustomerID") ] ) , ]
mydata[ ! duplicated( mydata[ c("from_id" , "to_id") ] ) , ]
mydata[ ! duplicated( mydata[ c("from_station_id" , "to_station_id") ] ) , ]
mydata <- mydata[ ! duplicated( mydata[ c("from_station_id" , "to_station_id") ] ) , ]
View(mydata)
View(mydata)
mydata <- read.csv("./Documents/divvy.csv")
mydata2 <- data.frame(C(1,2,3), C(4,5,6))
mydata2 <- data.frame(c(1,2,3), c(4,5,6))
mydata2
rbind(mydata2, c(3,6))
mydata2[mydata2$c.1..2..3.=1]
mydata2[mydata2$c.1..2..3.==1]
mydata2[mydata2$c.1..2..3.>1]
## Input
price = 101       # Price of bond
tenure = 3
no_comp = 1      # no of times coupon paid in a year.
coupon_rate = 0.10  # i.e. 10%
face_value  = 100
# Computations
coupon_payment = face_value * coupon_rate
cash_flow = c(rep(c(coupon_payemnt), (no_comp * tenure - 1)), face_value + coupon_payment)
cash_flow
## I am trying to customize the code as given by Mr Ellison.
f.ytm = function(ytm)
{
for (i in 1 : (tenure * no_comp - 1))
E = NULL
F = NULL
{
E[i] = cash_flow[i]/(1+ytm)^i
F = (sum(E) + (face_value + coupon_payment)/((1+ytm)^(tenure * no_comp))) - price
}
}
solution = uniroot(f.ytm, interval=c(0,25))
ytm = solution$root
f.ytm = function(ytm)
{
E = NULL
F = NULL
price <- 100
mature <- 10
coupon <- 5
parvalue <- 100
for (i in 1 : mature)
{
E[i] <- coupon/(1+ytm)^i
}
E[mature] <- parvalue/(1+ytm)^i
sum_e <- sum(E)
}
solution = uniroot(f.ytm, interval=c(0,25))
ytm = solution$root
ytm
f.ytm(0.1)
f.ytm(0.1)
f.ytm(0.1)
f.ytm = function(ytm)
{
E = NULL
F = NULL
price <- 100
mature <- 10
coupon <- 5
parvalue <- 100
for (i in 1 : mature)
{
E[i] <- coupon/(1+ytm)^i
}
E[mature] <- parvalue/(1+ytm)^i
sum_e <- sum(E)
return(sum_e)
}
f.ytm(0.1)
f.ytm(0.1)
f.ytm = function(ytm)
{
E = NULL
F = NULL
price <- 100
mature <- 10
coupon <- 5
parvalue <- 100
for (i in 1 : mature)
{
E[i] <- coupon/(1+ytm)^i
}
E[mature] <- parvalue/(1+ytm)^i
sum_e <- sum(E)
return(sum_e - price)
}
f.ytm(0.01)
f.ytm(0.05)
solution = uniroot(f.ytm, interval=c(0,25))
solution
f.bondprice = function (mature, coupon, par, discount)
{
E = NULL
for (i in 1 : mature)
{
E[i] <- coupon/(1+discount)^i
}
E[mature] <- parvalue/(1+discount)^i
sum_e <- sum(E)
return (sum_e)
}
f.bondprice(10, 5, 100, 0.04)
f.bondprice(10, 5, 100, 0.04)
f.bondprice = function (mature, coupon, par, discount)
{
E = NULL
for (i in 1 : mature)
{
E[i] <- coupon/(1+discount)^i
}
E[mature] <- par/(1+discount)^i
sum_e <- sum(E)
return (sum_e)
}
f.bondprice(mature=10, coupon = 5, par=100, discount=0.05)
(1 + (0.07/1))/0.07 - ((1+0.07/1) + 2*(0.07-0.07)) / (0.07*((1+0.07/1)^10-1) + 0.07) = 7.95
(1 + (0.07/1))/0.07 - ((1+0.07/1) + 2*(0.07-0.07)) / (0.07*((1+0.07/1)^10-1) + 0.07)
101*1.0 - 110.677
101*0.884 - 97.140
f.bondprice = function (mature, coupon, par, discount)
{
E = NULL
for (i in 1 : mature)
{
E[i] <- coupon/(1+discount)^i
}
E[mature] <- par/(1+discount)^i
sum_e <- sum(E)
return (sum_e)
}
f.bondprice(mature=1, coupon=6, par=100, discount=(0.04941/2))
100-4.97
f.bondprice(mature=1, coupon=6, par=100, discount=0.0497)
100-0.0497
100 - 4.97
f.bondprice(mature=2, coupon=0, par=100, discount=0.0550)
f.bondprice(mature=3, coupon=7, par=100, discount=0.05955113)
f.bondprice = function (mature, coupon, par, discount)
{
E = NULL
for (i in 1 : mature)
{
E[i] <- coupon/(1+discount)^i
}
E[mature] <- par/(1+discount)^mature
sum_e <- sum(E)
return (sum_e)
}
f.bondprice(mature=2, coupon=0, par=100, discount=0.0550)
f.bondprice(mature=1, coupon=6, par=100, discount=0.0500)
106/1.05
f.bondprice = function (mature, coupon, par, discount)
{
E = NULL
if(mature == 1) {
E[1] = coupon/(1+discount)
} else {
for (i in 1 : mature)
{
E[i] <- coupon/(1+discount)^i
}
}
E[mature] <- par/(1+discount)^mature
sum_e <- sum(E)
return (sum_e)
}
f.bondprice(mature=1, coupon=6, par=100, discount=0.0500)
f.bondprice = function (mature, coupon, par, discount)
{
E = NULL
sum_e = 0;
if(mature == 1) {
E[1] <- (coupon +par) /(1+discount)
sum_e <- sum(E)
} else {
for (i in 1 : mature)
{
E[i] <- coupon/(1+discount)^i
}
E[mature] <- par/(1+discount)^mature
sum_e <- sum(E)
}
return (sum_e)
}
f.bondprice(mature=1, coupon=6, par=100, discount=0.0500)
f.bondprice(mature=3, coupon=7, par=100, discount=0.05955)
E
f.bondprice = function (mature, coupon, par, discount)
{
E = NULL
sum_e = 0;
if(mature == 1) {
E[1] <- (coupon +par) /(1+discount)
sum_e <- sum(E)
} else {
for (i in 1 : mature)
{
E[i] <- coupon/(1+discount)^i
}
E[mature] <- par/(1+discount)^mature
E
sum_e <- sum(E)
}
return (sum_e)
}
f.bondprice(mature=3, coupon=7, par=100, discount=0.05955)
for(i in 1:mature) {}
for(i in 1:3) {E[i] <- 7/(1.05955^i)}
E = NULL
for(i in 1:3) {E[i] <- 7/(1.05955^i)}
E
f.bondprice = function (mature, coupon, par, discount)
{
E = NULL
sum_e = 0;
if(mature == 1) {
E[1] <- (coupon +par) /(1+discount)
sum_e <- sum(E)
} else {
for (i in 1:mature)
{
E[i] <- coupon/((1+discount)^i)
}
E[mature] <- E[mature] + par/((1+discount)^mature)
sum_e <- sum(E)
}
return (sum_e)
}
f.bondprice(mature=3, coupon=7, par=100, discount=0.05955)
f.bondprice(mature=2, coupon=0, par=100, discount=0.055)
yield <- c(0.0500, 0.0550, 0.0595)
plot(yield)
plot(yield, line())
line(yield)
lines(yield)
lines(yield, ylim=c(0,0.06))
lines(yield, ylim=c(0,0.06))
lines(yield, ylim=c(0,0.06))
lines(yield, ylim=c(0,0.06))
plot(yield)
lines(yield, ylim=c(0,0.06))
plot(yield, ylim=c(0,0.06))
lines(yield, ylim=c(0,0.06))
Macaulay duration = ( 7/1.05955 + 7*2/(1.05955)^2 + 107*3/(1.05955)^3 ) / 102.7956
( 7/1.05955 + 7*2/(1.05955)^2 + 107*3/(1.05955)^3 ) / 102.7956
2.81 / 1.05955
(1.055)^2/1.050 - 1
(1.05955)^3/(1.055)^2 - 1
0.002 + 0.2*0.005
(0.03*100*0.4 + 0.97*100 ) / 100
0.8*(100 + 7 - 100)/100 + 0.2*(0.75*100 â€“ 100)/100
0.8*(100 + 7 - 100)/100 + 0.2*(0.75*100 - 100)/100
0.8*(100 + 7 - 100)/100 + 0.2*(0.25*100 - 100)/100
(0.2 * 0.75 * 100 + 0.8 * 100) / (1+0.045)
100/90.90909 - 1
(0.2 * 0.25 * 100 + 0.8 * 100) / (1+0.045)
100/81.33971-1
(0.03 * 0.4 * 100 + 0.97 * 100)/(1 + 0.012)
100/97.03557-1
t1 <- 1:10
t1
cf1 = NULL
for(i in 1:10) {}
for(i in 1:10) { cf1[i] <- 7 }
cf1[10] <- 107
cf1
pv1 <- cf1 / (1.07)^t1
pv1
sum(pv1)
t2 <- t1 + t1^2
t2
convex <- t2 * pv1
convex
sum(convex)
ctable <- data.frame(timet=t1, cashflow=cf1, pvcf=pv1, tsquare=t2, convexivity=convex)
ctable
sum(ctable$convexivity) / (100*(1.07)^2)
setwd("~/Documents/FinanceInR")
f.duration = function(maturity, par, coupon, discount)
{
duration = NULL
for(i in 1:maturity) {
if(i==maturity) {
duration[i] <- (i * (coupon[i]+par))/(1+discount)^i
} else {
duration[i] <- (i * coupon[i])/(1+discount)^i
}
}
return(sum(duration)/par)
}
f.duration(maturity=10, par=100, coupon=5, discount=0.05)
f.duration = function(maturity, par, coupon, discount)
{
duration = NULL
for(i in 1:maturity) {
if(i==maturity) {
duration[i] <- (i * (coupon[i]+par))/(1+discount)^i
} else {
duration[i] <- (i * coupon[i])/(1+discount)^i
}
}
return(sum(duration))
}
f.duration(maturity=10, par=100, coupon=5, discount=0.05)
f.duration = function(maturity, par, coupon, discount)
{
duration = NULL
for(i in 1:maturity) {
if(i==maturity) {
duration[i] <- (i * (coupon+par))/(1+discount)^i
} else {
duration[i] <- (i * coupon)/(1+discount)^i
}
}
return(sum(duration))
}
f.duration(maturity=10, par=100, coupon=5, discount=0.05)
f.duration = function(maturity, par, coupon, discount)
{
duration = NULL
for(i in 1:maturity) {
if(i==maturity) {
duration[i] <- (i * (coupon+par))/(1+discount)^i
} else {
duration[i] <- (i * coupon)/(1+discount)^i
}
}
return(sum(duration)/par)
}
f.duration(maturity=2, par=100, coupon=8, discount=0.08)
duration
f.duration(maturity=4, par=100, coupon=4, discount=0.04)
f.duration = function(maturity, par, coupon, discount, k)
{
duration = NULL
coupon_payment <- k*maturity
for(i in 1:coupon_payment) {
if(i==coupon_payment) {
duration[i] <- (i * (coupon/k+par))/(1+discount/k)^i
} else {
duration[i] <- (i * coupon/k)/(1+discount/k)^i
}
}
return(sum(duration)/par)
}
f.duration(maturity=4, par=100, coupon=4, discount=0.04, k=2)
f.duration(maturity=2, par=100, coupon=8, discount=0.08, k=2)
f.duration = function(maturity, par, coupon, discount, k)
{
duration = NULL
coupon_payment <- k*maturity
for(i in 1:coupon_payment) {
if(i==coupon_payment) {
duration[i] <- (i * ((coupon/k)+par))/(1+(discount/k))^i
} else {
duration[i] <- (i * (coupon/k))/(1+(discount/k))^i
}
}
return(sum(duration)/par)
}
f.duration(maturity=2, par=100, coupon=8, discount=0.08, k=2)
f.duration = function(maturity, par, coupon, discount, k)
{
duration = NULL
coupon_payment <- k*maturity
for(i in 1:coupon_payment) {
if(i==coupon_payment) {
duration[i] <- ((i/k) * ((coupon/k)+par))/(1+(discount/k))^i
} else {
duration[i] <- ((i/k) * (coupon/k))/(1+(discount/k))^i
}
}
return(sum(duration)/par)
}
f.duration(maturity=2, par=100, coupon=8, discount=0.08, k=2)
f.duration(maturity=3, par=100, coupon=0, discount=0.08, k=1)
f.duration = function(maturity, par, coupon, discount, k)
{
duration = NULL
coupon_payment <- k*maturity
if(coupon == 0) {
#zero coupon bond
return(maturity)
}
for(i in 1:coupon_payment) {
if(i==coupon_payment) {
duration[i] <- ((i/k) * ((coupon/k)+par))/(1+(discount/k))^i
} else {
duration[i] <- ((i/k) * (coupon/k))/(1+(discount/k))^i
}
}
return(sum(duration)/par)
}
f.duration(maturity=3, par=100, coupon=0, discount=0.08, k=1)
f.duration = function(maturity, par, coupon, discount, k=1)
{
duration = NULL
coupon_payment <- k*maturity
if(coupon == 0) {
#zero coupon bond
return(maturity)
}
for(i in 1:coupon_payment) {
if(i==coupon_payment) {
duration[i] <- ((i/k) * ((coupon/k)+par))/(1+(discount/k))^i
} else {
duration[i] <- ((i/k) * (coupon/k))/(1+(discount/k))^i
}
}
return(sum(duration)/par)
}
f.duration(maturity=3, par=100, coupon=0, discount=0.08)
f.duration(maturity=3, par=100, coupon=0, discount=0.08, k=2)
f.duration(maturity=3, par=100, coupon=8, discount=0.08)
f.duration(maturity=2, par=100, coupon=8, discount=0.08)
f.duration(maturity=2, par=100, coupon=8, discount=0.08, k=2)
f.convexivity = function(maturity, par=100, coupon, discount, k=1)
{
real_maturity <- maturity * k
real_coupon <- coupon / k
real_discount <- discount / k
period <- 1:real_maturity
cash_flow = NULL
tt = NULL
pv_cash_flow = NULL
for(i in 1:real_maturity) {
cash_flow[i] <- real_coupon
}
cash_flow[real_maturity] <- cash_flow[real_maturity] + par
for(i in 1:real_maturity) {
pv_cash_flow[i] <- cash_flow / (1+real_discount)^i
}
for(i in 1:real_maturity) {
tt[i] <- (period[i] * (period[i] + 1))/k
}
convexivity <- tt * pv_cash_flow
convex <- sum(convexivity) / (par * (1+real_discount)^2)
return(convex)
}
f.convexivity(maturity=10, coupon=7, discount=0.07)
f.convexivity = function(maturity, par=100, coupon, discount, k=1)
{
real_maturity <- maturity * k
real_coupon <- coupon / k
real_discount <- discount / k
period <- 1:real_maturity
cash_flow = NULL
tt = NULL
pv_cash_flow = NULL
for(i in 1:real_maturity) {
cash_flow[i] <- real_coupon
}
cash_flow[real_maturity] <- cash_flow[real_maturity] + par
for(i in 1:real_maturity) {
pv_cash_flow[i] <- cash_flow[i] / (1+real_discount)^i
}
for(i in 1:real_maturity) {
tt[i] <- (period[i] * (period[i] + 1))/k
}
convexivity <- tt * pv_cash_flow
convex <- sum(convexivity) / (par * (1+real_discount)^2)
return(convex)
}
f.convexivity(maturity=10, coupon=7, discount=0.07)
f.convexivity(maturity=10, coupon=7, discount=0.07, k=2)
